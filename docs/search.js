window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyxora", "modulename": "pyxora", "kind": "module", "doc": "<p>A simple game engine made with Python and pygame-ce.</p>\n"}, {"fullname": "pyxora.debug", "modulename": "pyxora", "qualname": "debug", "kind": "variable", "doc": "<p>Flag var indicating whether debug mode is enabled.</p>\n\n<p>Set it to <code>False</code> if you want to disable the extra debugging features.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "pyxora.version", "modulename": "pyxora", "qualname": "version", "kind": "variable", "doc": "<p>pyxora Version</p>\n", "annotation": ": str", "default_value": "&#x27;0.2.2&#x27;"}, {"fullname": "pyxora.pygame_version", "modulename": "pyxora", "qualname": "pygame_version", "kind": "variable", "doc": "<p>pygame Version</p>\n", "annotation": ": str", "default_value": "&#x27;2.5.4&#x27;"}, {"fullname": "pyxora.sdl_version", "modulename": "pyxora", "qualname": "sdl_version", "kind": "variable", "doc": "<p>SDL Version</p>\n", "annotation": ": str", "default_value": "&#x27;2.32.6&#x27;"}, {"fullname": "pyxora.assets", "modulename": "pyxora.assets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.assets.Data", "modulename": "pyxora.assets", "qualname": "Data", "kind": "class", "doc": "<p>The Data structure</p>\n"}, {"fullname": "pyxora.assets.Data.__init__", "modulename": "pyxora.assets", "qualname": "Data.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">images</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">fonts</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">scenes</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">scripts</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">music</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sfx</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "pyxora.assets.Data.files", "modulename": "pyxora.assets", "qualname": "Data.files", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, dict[str, str]]"}, {"fullname": "pyxora.assets.Data.images", "modulename": "pyxora.assets", "qualname": "Data.images", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "pyxora.assets.Data.fonts", "modulename": "pyxora.assets", "qualname": "Data.fonts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "pyxora.assets.Data.scenes", "modulename": "pyxora.assets", "qualname": "Data.scenes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "pyxora.assets.Data.scripts", "modulename": "pyxora.assets", "qualname": "Data.scripts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "pyxora.assets.Data.music", "modulename": "pyxora.assets", "qualname": "Data.music", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "pyxora.assets.Data.sfx", "modulename": "pyxora.assets", "qualname": "Data.sfx", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "pyxora.assets.Assets", "modulename": "pyxora.assets", "qualname": "Assets", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyxora.assets.Assets.init", "modulename": "pyxora.assets", "qualname": "Assets.init", "kind": "function", "doc": "<p>Initialize the Assets system by loading asset files into the Data structure.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path_images (str, optional):</strong>  Path to image files.</li>\n<li><strong>path_fonts (str, optional):</strong>  Path to font files.</li>\n<li><strong>path_scenes (str, optional):</strong>  Path to scene files.</li>\n<li><strong>path_scripts (str, optional):</strong>  Path to script files.</li>\n<li><strong>path_music (str, optional):</strong>  Path to song files.</li>\n<li><strong>path_sfx (str, optional):</strong>  Path to sound effect files.</li>\n<li><strong>pre_load (bool):</strong>  Whether to preload the assets immediately. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">path_images</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path_fonts</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path_scenes</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path_scripts</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path_music</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path_sfx</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pre_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.assets.Assets.get", "modulename": "pyxora.assets", "qualname": "Assets.get", "kind": "function", "doc": "<p>Safely retrieve a nested value from a source dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>source (str):</strong>  The data name to retrieve data from.</li>\n<li><strong>*loc (str):</strong>  A sequence of keys representing the path to the desired value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The value at the specified nested location, or None if the path is invalid.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>Assets.get(\"data\"images\", \"player\")  # Returns the player Surface if it exists\n  Assets.get(\"engine,\"images\", \"icon\")  # Returns the engine icon Surface</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">loc</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.assets.Assets.load", "modulename": "pyxora.assets", "qualname": "Assets.load", "kind": "function", "doc": "<p>Load file paths into the data system</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>source (str):</strong>  The data name to retrieve data from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display", "modulename": "pyxora.display", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.display.Display", "modulename": "pyxora.display", "qualname": "Display", "kind": "class", "doc": "<p>Handles the main game display surface and rendering.</p>\n"}, {"fullname": "pyxora.display.Display.window", "modulename": "pyxora.display", "qualname": "Display.window", "kind": "variable", "doc": "<p>The main display window</p>\n", "default_value": "None"}, {"fullname": "pyxora.display.Display.surf", "modulename": "pyxora.display", "qualname": "Display.surf", "kind": "variable", "doc": "<p>The min display surface</p>\n", "default_value": "None"}, {"fullname": "pyxora.display.Display.clock", "modulename": "pyxora.display", "qualname": "Display.clock", "kind": "variable", "doc": "<p>The main display clock</p>\n", "default_value": "None"}, {"fullname": "pyxora.display.Display.init", "modulename": "pyxora.display", "qualname": "Display.init", "kind": "function", "doc": "<p>Initializes the main display window used by all scenes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>title (str):</strong>  The title of the window.</li>\n<li><strong>resolution (Tuple[int, int]):</strong>  The resolution of the window (width, height).</li>\n<li><strong>stretch (bool):</strong>  Whether to stretch the internal surface to fit the screen. Defaults to False.</li>\n<li><strong>fullscreen (bool):</strong>  Start in fullscreen mode. Defaults to False.</li>\n<li><strong>resizable (bool):</strong>  Allows the window to be resizable. Defaults to False.</li>\n<li><strong>vsync (bool):</strong>  Enables vertical sync. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">monitor</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">stretch</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fullscreen</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">resizable</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">vsync</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.set_title", "modulename": "pyxora.display", "qualname": "Display.set_title", "kind": "function", "doc": "<p>Class method to set the window title.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.set_icon", "modulename": "pyxora.display", "qualname": "Display.set_icon", "kind": "function", "doc": "<p>Class method to set the window icon.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.set_res", "modulename": "pyxora.display", "qualname": "Display.set_res", "kind": "function", "doc": "<p>Set a new resolution (without re-sizing the window)\nIf you want to re-size the window, use the <code>resize</code> method instead.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>res (Tuple[float, float]):</strong>  The new resolution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">res</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.get_res", "modulename": "pyxora.display", "qualname": "Display.get_res", "kind": "function", "doc": "<p>Get the base resolution.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[float, float]: The main (base) resolution of the window.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.get_center", "modulename": "pyxora.display", "qualname": "Display.get_center", "kind": "function", "doc": "<p>Get the center point of the base resolution.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[float, float]: The (x, y) center coordinates of the base resolution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.get_size", "modulename": "pyxora.display", "qualname": "Display.get_size", "kind": "function", "doc": "<p>Get the possibly scaled resolution.</p>\n\n<p>If a new resolution is set, it returns that.\nOtherwise, it returns the base resolution.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[float, float]: The size of the window.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.is_resized", "modulename": "pyxora.display", "qualname": "Display.is_resized", "kind": "function", "doc": "<p>Check if the display has been resized.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if a new resolution has been set, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.is_fullscreen", "modulename": "pyxora.display", "qualname": "Display.is_fullscreen", "kind": "function", "doc": "<p>Check if the display has been resized.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if a new resolution has been set, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.resize", "modulename": "pyxora.display", "qualname": "Display.resize", "kind": "function", "doc": "<p>Resize the display window.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>new_res (tuple[int, int]):</strong>  The new resolution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">new_res</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.get_stretch_surf", "modulename": "pyxora.display", "qualname": "Display.get_stretch_surf", "kind": "function", "doc": "<p>Get a stretched version of the internal surface to the new resolution.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.Surface: The scaled surface.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.toggle_fullscreen", "modulename": "pyxora.display", "qualname": "Display.toggle_fullscreen", "kind": "function", "doc": "<p>Toggle fullscreen mode on or off.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.draw_shape", "modulename": "pyxora.display", "qualname": "Display.draw_shape", "kind": "function", "doc": "<p>Draw a shape on the screen.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>Shape:</strong>  The shape object with a <code>.draw()</code> method.</li>\n<li><strong>fill (int, optional):</strong>  Fill mode or color. Defaults to 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">Shape</span>, </span><span class=\"param\"><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.draw_text", "modulename": "pyxora.display", "qualname": "Display.draw_text", "kind": "function", "doc": "<p>Draw text on the screen.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>Txt:</strong>  A text object with a <code>.draw()</code> method.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">Txt</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.display.Display.draw_image", "modulename": "pyxora.display", "qualname": "Display.draw_image", "kind": "function", "doc": "<p>Draw an image on the screen.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>Image:</strong>  An image object with a <code>.draw()</code> method.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">Image</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene", "modulename": "pyxora.scene", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.scene.SceneManager", "modulename": "pyxora.scene", "qualname": "SceneManager", "kind": "class", "doc": "<p>The Main Manager of the Scenes.</p>\n"}, {"fullname": "pyxora.scene.SceneManager.scenes", "modulename": "pyxora.scene", "qualname": "SceneManager.scenes", "kind": "variable", "doc": "<p>A mapping of scene keys to (name, Scene object, additional data) tuples.</p>\n", "annotation": ": Dict[str, Tuple[str, pyxora.scene.Scene, Any]]", "default_value": "{}"}, {"fullname": "pyxora.scene.SceneManager.selected", "modulename": "pyxora.scene", "qualname": "SceneManager.selected", "kind": "variable", "doc": "<p>The currently selected scene</p>\n", "annotation": ": str"}, {"fullname": "pyxora.scene.SceneManager.scene", "modulename": "pyxora.scene", "qualname": "SceneManager.scene", "kind": "variable", "doc": "<p>Property to get the active scene.</p>\n", "annotation": ": Tuple[str, pyxora.scene.Scene, Any]"}, {"fullname": "pyxora.scene.SceneManager.start", "modulename": "pyxora.scene", "qualname": "SceneManager.start", "kind": "function", "doc": "<p>Start the main game loop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "pyxora.scene.SceneManager.create", "modulename": "pyxora.scene", "qualname": "SceneManager.create", "kind": "function", "doc": "<p>Create a new scene instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scene_class (str):</strong>  The class of the scene.</li>\n<li><strong>kwargs:</strong>  Additional arguments passed to the scene's constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneManager.change_to", "modulename": "pyxora.scene", "qualname": "SceneManager.change_to", "kind": "function", "doc": "<p>Exit and change to a different scene.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the scene to switch to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneManager.pause", "modulename": "pyxora.scene", "qualname": "SceneManager.pause", "kind": "function", "doc": "<p>Pause the current scene.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneManager.resume", "modulename": "pyxora.scene", "qualname": "SceneManager.resume", "kind": "function", "doc": "<p>Resumes the current scene.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneManager.quit", "modulename": "pyxora.scene", "qualname": "SceneManager.quit", "kind": "function", "doc": "<p>Quit the application through the current scene.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneEvent", "modulename": "pyxora.scene", "qualname": "SceneEvent", "kind": "class", "doc": "<p>A helper class to create custom events for the Scenes.</p>\n"}, {"fullname": "pyxora.scene.SceneEvent.create", "modulename": "pyxora.scene", "qualname": "SceneEvent.create", "kind": "function", "doc": "<p>Create and store a new custom event.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the event.</li>\n<li><strong>state (int):</strong>  The event state, where:\n<ul>\n<li>1: Runtime</li>\n<li>-1: Pause time</li>\n<li>0: Both (default = 0)</li>\n</ul></li>\n<li><strong>**kwargs:</strong>  Additional arguments passed to the event's info. Can be any extra data needed for the event.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The ID of the new event.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneEvent.get", "modulename": "pyxora.scene", "qualname": "SceneEvent.get", "kind": "function", "doc": "<p>Get a custom event by its name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the event.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.event.Event or None: The event with the specified name, or None if not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneEvent.remove", "modulename": "pyxora.scene", "qualname": "SceneEvent.remove", "kind": "function", "doc": "<p>Remove a custom event by its name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the event.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SceneEvent: The event that was removed</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyxora</span><span class=\"o\">.</span><span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">SceneEvent</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneEvent.post", "modulename": "pyxora.scene", "qualname": "SceneEvent.post", "kind": "function", "doc": "<p>Post a custom event by its name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the event.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: returns a boolean on whether the event was posted or not</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneEvent.match", "modulename": "pyxora.scene", "qualname": "SceneEvent.match", "kind": "function", "doc": "<p>Check if a custom event matches by its name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the event.</li>\n<li><strong>other_event (SceneEvent):</strong>  The event to compare against.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the events match, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">other_event</span><span class=\"p\">:</span> <span class=\"n\">pyxora</span><span class=\"o\">.</span><span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">SceneEvent</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.SceneEvent.schedule", "modulename": "pyxora.scene", "qualname": "SceneEvent.schedule", "kind": "function", "doc": "<p>Shedule a custom event by it's name, for ms timer and loop times.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the event.</li>\n<li><strong>timer (int):</strong>  The time of the shedule in ms.</li>\n<li><strong>loops (int):</strong>  The amount of loop times (default = -1, forever).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timer</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">loops</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene", "modulename": "pyxora.scene", "qualname": "Scene", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyxora.scene.Scene.__init__", "modulename": "pyxora.scene", "qualname": "Scene.__init__", "kind": "function", "doc": "<p>Initializes a Scene object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>**kwargs:</strong>  Additional arguments passed to the scene. Can be any extra data needed for the scene.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>RuntimeError:</strong>  If the Display has not been initialized. Call Display.init() first.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "pyxora.scene.Scene.Manager", "modulename": "pyxora.scene", "qualname": "Scene.Manager", "kind": "variable", "doc": "<p>Manager: Reference to the scene manager (SceneManager).</p>\n", "default_value": "&lt;class &#x27;pyxora.scene.SceneManager&#x27;&gt;"}, {"fullname": "pyxora.scene.Scene.Display", "modulename": "pyxora.scene", "qualname": "Scene.Display", "kind": "class", "doc": "<p>Display: Reference to the scene's display handler (pyxora.Display).</p>\n"}, {"fullname": "pyxora.scene.Scene.global_runtime", "modulename": "pyxora.scene", "qualname": "Scene.global_runtime", "kind": "variable", "doc": "<p>global_pausetime: The global runtime for all the scenes.</p>\n", "default_value": "0"}, {"fullname": "pyxora.scene.Scene.global_pausetime", "modulename": "pyxora.scene", "qualname": "Scene.global_pausetime", "kind": "variable", "doc": "<p>global_runtime: The global pause time for all the scenes.</p>\n", "default_value": "0"}, {"fullname": "pyxora.scene.Scene._start", "modulename": "pyxora.scene", "qualname": "Scene._start", "kind": "function", "doc": "<p>@public\nCalled once at the start of the scene. You must Override this func in your subclass.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  If not overridden.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._update", "modulename": "pyxora.scene", "qualname": "Scene._update", "kind": "function", "doc": "<p>@public\nCalled every frame to update scene logic. You must Override this func in your subclass.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  If not overridden.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._draw", "modulename": "pyxora.scene", "qualname": "Scene._draw", "kind": "function", "doc": "<p>@public\nCalled every frame to draw elements to the screen. You must Override this func in your subclass.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  If not overridden.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._paused_update", "modulename": "pyxora.scene", "qualname": "Scene._paused_update", "kind": "function", "doc": "<p>@public Called every paused frame to update scene logic. Override this func in your subclass.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._paused_draw", "modulename": "pyxora.scene", "qualname": "Scene._paused_draw", "kind": "function", "doc": "<p>@public Called every paused frame to draw elements to the screen. Override this func in your subclass.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_create", "modulename": "pyxora.scene", "qualname": "Scene._on_create", "kind": "function", "doc": "<p>@public Called once at the scene creation \"SceneManager.create()\". Override this func in your subclass to add code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_quit", "modulename": "pyxora.scene", "qualname": "Scene._on_quit", "kind": "function", "doc": "<p>@public Called once at the scene quit \"Scene.quit()\". Override this func in your subclass to add code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_restart", "modulename": "pyxora.scene", "qualname": "Scene._on_restart", "kind": "function", "doc": "<p>@public Called once at every scene restart \"Scene.restart()\". Override this func in your subclass to add code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_reset", "modulename": "pyxora.scene", "qualname": "Scene._on_reset", "kind": "function", "doc": "<p>@public Called once at the scene reset \"Scene.reset()\". Override this func in your subclass to add code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_resume", "modulename": "pyxora.scene", "qualname": "Scene._on_resume", "kind": "function", "doc": "<p>@public Called once at the scene resume \"Scene.resume()\". Override this func in your subclass to add code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_pause", "modulename": "pyxora.scene", "qualname": "Scene._on_pause", "kind": "function", "doc": "<p>@public Called once at the scene pause \"Scene.pause()\". Override this func in your subclass to add code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_error", "modulename": "pyxora.scene", "qualname": "Scene._on_error", "kind": "function", "doc": "<p>@public\nCalled once at engine error \"Scene.__handle_error()\". Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>error (BaseException):</strong>  The engine error that occurred.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"ne\">BaseException</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_event", "modulename": "pyxora.scene", "qualname": "Scene._on_event", "kind": "function", "doc": "<p>@public\nCalled every pygame event. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>event (pygame.Event):</strong>  The pygame event that occurred.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_keydown", "modulename": "pyxora.scene", "qualname": "Scene._on_keydown", "kind": "function", "doc": "<p>@public\nCalled every keyboard keydown. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  The keyboard key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_keyup", "modulename": "pyxora.scene", "qualname": "Scene._on_keyup", "kind": "function", "doc": "<p>@public\nCalled every keyboard keyup. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  The keyboard key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_keypressed", "modulename": "pyxora.scene", "qualname": "Scene._on_keypressed", "kind": "function", "doc": "<p>@public\nCalled every keypressed. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  The keyboard key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_mousewheel", "modulename": "pyxora.scene", "qualname": "Scene._on_mousewheel", "kind": "function", "doc": "<p>@public\nCalled every mousewheel change. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>wheel (int):</strong>  The wheel position, wheel>0 = up, wheel&lt;1 = down.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wheel</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_paused_event", "modulename": "pyxora.scene", "qualname": "Scene._on_paused_event", "kind": "function", "doc": "<p>@public\nCalled every paused pygame event. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>event (pygame.Event):</strong>  The pygame event that occurred.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_paused_keydown", "modulename": "pyxora.scene", "qualname": "Scene._on_paused_keydown", "kind": "function", "doc": "<p>@public\nCalled every paused keyboard keydown. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  The keyboard key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_paused_keyup", "modulename": "pyxora.scene", "qualname": "Scene._on_paused_keyup", "kind": "function", "doc": "<p>@public\nCalled every paused keyboard keypressed. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  The keyboard key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_paused_keypressed", "modulename": "pyxora.scene", "qualname": "Scene._on_paused_keypressed", "kind": "function", "doc": "<p>@public\nCalled every paused keypressed. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (str):</strong>  The keyboard key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene._on_paused_mousewheel", "modulename": "pyxora.scene", "qualname": "Scene._on_paused_mousewheel", "kind": "function", "doc": "<p>@public\nCalled every paused mousewheel change. Override this func in your subclass to add code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>wheel (int):</strong>  The wheel position, wheel>0 = up, wheel&lt;1 = down.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wheel</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.run", "modulename": "pyxora.scene", "qualname": "Scene.run", "kind": "function", "doc": "<p>Starts the scene.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If there is any error in the scene.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "pyxora.scene.Scene.pause", "modulename": "pyxora.scene", "qualname": "Scene.pause", "kind": "function", "doc": "<p>Pauses the scene.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.resume", "modulename": "pyxora.scene", "qualname": "Scene.resume", "kind": "function", "doc": "<p>Resumes the scene.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.restart", "modulename": "pyxora.scene", "qualname": "Scene.restart", "kind": "function", "doc": "<p>Restart the scene.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.reset", "modulename": "pyxora.scene", "qualname": "Scene.reset", "kind": "function", "doc": "<p>Reset the scene.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.exit", "modulename": "pyxora.scene", "qualname": "Scene.exit", "kind": "function", "doc": "<p>Exits the game loop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.quit", "modulename": "pyxora.scene", "qualname": "Scene.quit", "kind": "function", "doc": "<p>Quits the game entirely.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.is_time", "modulename": "pyxora.scene", "qualname": "Scene.is_time", "kind": "function", "doc": "<p>Checks if a specified time interval has elapsed since the last frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ms</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.is_event", "modulename": "pyxora.scene", "qualname": "Scene.is_event", "kind": "function", "doc": "<p>Checks if an event is happening during the frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.is_custom_event", "modulename": "pyxora.scene", "qualname": "Scene.is_custom_event", "kind": "function", "doc": "<p>Checks if a custom event is happening during the frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.is_paused", "modulename": "pyxora.scene", "qualname": "Scene.is_paused", "kind": "function", "doc": "<p>Returns if the scene is paused.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.scene.Scene.get_mouse_pos", "modulename": "pyxora.scene", "qualname": "Scene.get_mouse_pos", "kind": "function", "doc": "<p>Gets the current mouse pos.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils", "modulename": "pyxora.utils", "kind": "module", "doc": "<p>General-purpose utility functions used across the engine.</p>\n\n<p>This module provides small helper functions to simplify common or very specific tasks.</p>\n"}, {"fullname": "pyxora.utils.asyncio", "modulename": "pyxora.utils.asyncio", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.utils.asyncio.run", "modulename": "pyxora.utils.asyncio", "qualname": "run", "kind": "function", "doc": "<p>Executes the provided main function asynchronously for web environments.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (func.main):</strong>  The main func to be executed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.asyncio.sleep", "modulename": "pyxora.utils.asyncio", "qualname": "sleep", "kind": "function", "doc": "<p>Pauses execution asynchronously for the specified duration.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n (int):</strong>  The number of seconds to sleep.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Awaitable[None]: An awaitable object that needs to be awaited to perform the sleep.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.decorators", "modulename": "pyxora.utils.decorators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.utils.decorators.run_every", "modulename": "pyxora.utils.decorators", "qualname": "run_every", "kind": "function", "doc": "<p>Decorator for scene methods to run approximately every <code>ms</code> milliseconds.</p>\n\n<p>This is typically used in game loops to throttle how often a method is called.\nRequires the object to have an <code>is_time(ms)</code> method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ms (int):</strong>  Millisecond interval at which the decorated method should run.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ms</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.decorators.event_listener", "modulename": "pyxora.utils.decorators", "qualname": "event_listener", "kind": "function", "doc": "<p>Decorator for scene methods to run when a specific event is triggered.</p>\n\n<p>Requires the object to implement an <code>is_custom_event(event_name)</code> method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>event_name (str):</strong>  The name of the event to listen for.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event_name</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.engine", "modulename": "pyxora.utils.engine", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.utils.engine.error", "modulename": "pyxora.utils.engine", "qualname": "error", "kind": "function", "doc": "<p>Handles exceptions by printing or showing a popup error box.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>err (Exception):</strong>  The exception instance that was raised.</li>\n<li><strong>debug (bool):</strong>  If True, print the error details to the console; otherwise, show a GUI message box.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"ne\">Exception</span>, </span><span class=\"param\"><span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.engine.warning", "modulename": "pyxora.utils.engine", "qualname": "warning", "kind": "function", "doc": "<p>Prints a warning message to the console.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (str):</strong>  The warning message to display.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.engine.quit", "modulename": "pyxora.utils.engine", "qualname": "quit", "kind": "function", "doc": "<p>Exit the application cleanly.</p>\n\n<p>Calls <code>sys.exit()</code> to terminate the process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.platform", "modulename": "pyxora.utils.platform", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.utils.platform.get_platform", "modulename": "pyxora.utils.platform", "qualname": "get_platform", "kind": "function", "doc": "<p>Get the platform string from the system.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The platform (e.g., 'win32', 'linux', 'darwin', 'emscripten').</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.platform.get_web_platform", "modulename": "pyxora.utils.platform", "qualname": "get_web_platform", "kind": "function", "doc": "<p>Attempt to determine the user's OS/platform from the browser user agent.</p>\n\n<p>Only works if running in a web context (via Emscripten). Parses\nthe JavaScript <code>navigator.userAgent</code>.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str | None: One of ['ios', 'android', 'win', 'mac', 'linux', 'unknown'], or None if not in web.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.platform.is_web", "modulename": "pyxora.utils.platform", "qualname": "is_web", "kind": "function", "doc": "<p>Check if the game is running in a web environment (Emscripten).</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if compiled with Emscripten and running in a browser.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.platform.is_local", "modulename": "pyxora.utils.platform", "qualname": "is_local", "kind": "function", "doc": "<p>Check if the current platform is a local/native one (not web).</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if running on Windows, Linux, macOS, or Android.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.platform.is_windows", "modulename": "pyxora.utils.platform", "qualname": "is_windows", "kind": "function", "doc": "<p>Check if the current platform is Windows.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if on Windows.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.platform.is_linux", "modulename": "pyxora.utils.platform", "qualname": "is_linux", "kind": "function", "doc": "<p>Check if the current platform is Linux.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if on Linux.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.platform.is_mac", "modulename": "pyxora.utils.platform", "qualname": "is_mac", "kind": "function", "doc": "<p>Check if the current platform is macOS.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if on macOS.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.platform.is_android", "modulename": "pyxora.utils.platform", "qualname": "is_android", "kind": "function", "doc": "<p>Check if the current platform is Android.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if on Android.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.python", "modulename": "pyxora.utils.python", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.utils.python.get_filename", "modulename": "pyxora.utils.python", "qualname": "get_filename", "kind": "function", "doc": "<p>Get the filename (without extension) from a full path.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  Path to the file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Filename without extension.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.python.get_filetype", "modulename": "pyxora.utils.python", "qualname": "get_filetype", "kind": "function", "doc": "<p>Get the filetype (without extension) from a full path.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  Path to the file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Filename without extension.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.python.load_module", "modulename": "pyxora.utils.python", "qualname": "load_module", "kind": "function", "doc": "<p>Dynamically load a Python module from a given file path.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  Relative or absolute path to the <code>.py</code> file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>module: The loaded module object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>FileNotFoundError:</strong>  If the file does not exist.</li>\n<li><strong>ImportError:</strong>  If the module fails to load.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">module</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.utils.python.load_class", "modulename": "pyxora.utils.python", "qualname": "load_class", "kind": "function", "doc": "<p>Load a class from a path</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  The class path.</li>\n<li><strong>name (str):</strong>  The name of the class to retrieve.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>type: The loaded class object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">type</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper", "modulename": "pyxora.wrapper", "kind": "module", "doc": "<p>This module wraps and simplifies access to engine dependencies like pygame and pymunk.</p>\n\n<p>It provides helper functions or classes that unify interfaces (such as vectors, shapes, etc.).</p>\n"}, {"fullname": "pyxora.wrapper.image", "modulename": "pyxora.wrapper.image", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.wrapper.image.Image", "modulename": "pyxora.wrapper.image", "qualname": "Image", "kind": "class", "doc": "<p>The Image class that includes methods for drawing, moving, and scaling images on a Pygame surface.</p>\n"}, {"fullname": "pyxora.wrapper.image.Image.__init__", "modulename": "pyxora.wrapper.image", "qualname": "Image.__init__", "kind": "function", "doc": "<p>Initializes an Image object with the given position, image, shape type, and custom size.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>image (pygame.Surface):</strong>  The image surface.</li>\n<li><strong>pos (pos:</strong>  Tuple[int | float, int | float] | pygame.math.Vector2 | pygame.math.Vector3): The position of the image.</li>\n<li><strong>shape_type (int):</strong>  The shape type of the image. Default = rect</li>\n<li><strong>align (str):</strong>  The alignment of the image. Default = topleft</li>\n<li><strong>custom_size (tuple):</strong>  The custom size of the image. Optional</li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>Available Shape Types: rect,circle (more will be added in the future, along with shapes.py)\n  Available Alignments: topleft, topright, midtop, midleft, center, midright, bottomleft, midbottom, bottomright</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">shape_type</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rect&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">align</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;topleft&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">custom_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyxora.wrapper.image.Image.position", "modulename": "pyxora.wrapper.image", "qualname": "Image.position", "kind": "variable", "doc": "<p>Get a copy of the position of the text.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.math.Vector2 or pygame.math.Vector3: The position of the text.</p>\n</blockquote>\n", "annotation": ": pygame.math.Vector2 | pygame.math.Vector3"}, {"fullname": "pyxora.wrapper.image.Image.size", "modulename": "pyxora.wrapper.image", "qualname": "Image.size", "kind": "variable", "doc": "<p>Get a the size of the image.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: the image size</p>\n</blockquote>\n", "annotation": ": tuple"}, {"fullname": "pyxora.wrapper.image.Image.shape", "modulename": "pyxora.wrapper.image", "qualname": "Image.shape", "kind": "variable", "doc": "<p>Get a the shape of the image.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: the image shape</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "pyxora.wrapper.image.Image.value", "modulename": "pyxora.wrapper.image", "qualname": "Image.value", "kind": "variable", "doc": "<p>Get a copy of the surface image.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.Surface: the image copy surface</p>\n</blockquote>\n", "annotation": ": pygame.surface.Surface"}, {"fullname": "pyxora.wrapper.image.Image.rect", "modulename": "pyxora.wrapper.image", "qualname": "Image.rect", "kind": "variable", "doc": "<p>Returns the rectangle of the image.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.Rect: The rectangle of the image.</p>\n</blockquote>\n", "annotation": ": pygame.rect.Rect"}, {"fullname": "pyxora.wrapper.image.Image.memory", "modulename": "pyxora.wrapper.image", "qualname": "Image.memory", "kind": "variable", "doc": "<p>Returns the memory size of the image in bytes.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The memory size of the image surface.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "pyxora.wrapper.image.Image.move", "modulename": "pyxora.wrapper.image", "qualname": "Image.move", "kind": "function", "doc": "<p>Moves the image by the given offset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (Tuple[int | float, int | float] | Vector2 | Vector3):</strong>  The amount to move the image by, relative to its current position.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.image.Image.move_at", "modulename": "pyxora.wrapper.image", "qualname": "Image.move_at", "kind": "function", "doc": "<p>Moves the image to a position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (Tuple[int | float, int | float] | Vector2 | Vector3):</strong>  The new position for the image.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.image.Image.draw", "modulename": "pyxora.wrapper.image", "qualname": "Image.draw", "kind": "function", "doc": "<p>Draws the image on the given surface.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>surf (pygame.Surface):</strong>  The surface to draw the image on.</li>\n<li><strong>scale (float):</strong>  The scale factor to apply to the image.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">surf</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.music", "modulename": "pyxora.wrapper.music", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.wrapper.music.Music", "modulename": "pyxora.wrapper.music", "qualname": "Music", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyxora.wrapper.music.Music.__init__", "modulename": "pyxora.wrapper.music", "qualname": "Music.__init__", "kind": "function", "doc": "<p>Initialize a Music object with a path and volume.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  The path to the music file.</li>\n<li><strong>volume (float):</strong>  The volume level of the music.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">volume</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "pyxora.wrapper.music.Music.playing", "modulename": "pyxora.wrapper.music", "qualname": "Music.playing", "kind": "variable", "doc": "<p>The playing status of the music.</p>\n", "annotation": ": bool"}, {"fullname": "pyxora.wrapper.music.Music.time", "modulename": "pyxora.wrapper.music", "qualname": "Music.time", "kind": "variable", "doc": "<p>The current time position of the music.</p>\n", "annotation": ": int"}, {"fullname": "pyxora.wrapper.music.Music.volume", "modulename": "pyxora.wrapper.music", "qualname": "Music.volume", "kind": "variable", "doc": "<p>The volume of the music (volume * local_volume).</p>\n", "annotation": ": float"}, {"fullname": "pyxora.wrapper.music.Music.metadata", "modulename": "pyxora.wrapper.music", "qualname": "Music.metadata", "kind": "variable", "doc": "<p>The metadata of the music.</p>\n", "annotation": ": dict"}, {"fullname": "pyxora.wrapper.music.Music.change_volume", "modulename": "pyxora.wrapper.music", "qualname": "Music.change_volume", "kind": "function", "doc": "<p>Change the volume of all music.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.music.Music.change_local_volume", "modulename": "pyxora.wrapper.music", "qualname": "Music.change_local_volume", "kind": "function", "doc": "<p>Change the volume of the music.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.music.Music.play", "modulename": "pyxora.wrapper.music", "qualname": "Music.play", "kind": "function", "doc": "<p>Starts the music.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>loops (int):</strong>  Number of times to repeat the music after the first play.\n-1 means the music will play once.\n0 means indefinitely.\n&gt;=1 means play n times.</li>\n<li><strong>start (float):</strong>  Position (in seconds) to start the music from.</li>\n<li><strong>fade_ms (int):</strong>  Milliseconds to fade in the music.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loops</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">fade_ms</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.music.Music.resume", "modulename": "pyxora.wrapper.music", "qualname": "Music.resume", "kind": "function", "doc": "<p>Resume the music.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.music.Music.pause", "modulename": "pyxora.wrapper.music", "qualname": "Music.pause", "kind": "function", "doc": "<p>Pause the music.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.music.Music.stop", "modulename": "pyxora.wrapper.music", "qualname": "Music.stop", "kind": "function", "doc": "<p>Stop the music.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.others", "modulename": "pyxora.wrapper.others", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.wrapper.others.vector", "modulename": "pyxora.wrapper.others", "qualname": "vector", "kind": "function", "doc": "<p>Creates a 2D or 3D pygame vector based on the input arguments.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (int | float):</strong>  X value of the vector.</li>\n<li><strong>y (int | float):</strong>  Y value of the vector.</li>\n<li><strong>z (int | float | None):</strong>  Optional Z value; if provided, returns a 3D vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.math.Vector2 or pygame.math.Vector3: A 2D or 3D vector.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>vector(1, 2) -> pygame.math.Vector2(1, 2)</p>\n  \n  <p>vector(1, 2, 3) -> pygame.math.Vector3(1, 2, 3)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span> <span class=\"o\">|</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.sfx", "modulename": "pyxora.wrapper.sfx", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.__init__", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.__init__", "kind": "function", "doc": "<p>Initialize a SoundEffect object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>effect (pygame.mixer.Sound):</strong>  The sound effect.</li>\n<li><strong>volume (float):</strong>  The volume level of the music.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">effect</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">mixer</span><span class=\"o\">.</span><span class=\"n\">Sound</span>, </span><span class=\"param\"><span class=\"n\">volume</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.playing", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.playing", "kind": "variable", "doc": "<p>The playing status of the effect.</p>\n", "annotation": ": bool"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.channels", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.channels", "kind": "variable", "doc": "<p>The number of channels the effect is playing on.</p>\n", "annotation": ": int"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.length", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.length", "kind": "variable", "doc": "<p>The length of the sound effect in seconds.</p>\n", "annotation": ": float"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.raw", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.raw", "kind": "variable", "doc": "<p>The raw data of the sound effect in byes</p>\n", "annotation": ": bytes"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.volume", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.volume", "kind": "variable", "doc": "<p>The volume of the music (volume * local_volume).</p>\n", "annotation": ": float"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.change_volume", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.change_volume", "kind": "function", "doc": "<p>Change the volume of all music.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.change_local_volume", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.change_local_volume", "kind": "function", "doc": "<p>Change the volume of the music.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.play", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.play", "kind": "function", "doc": "<p>Starts the sound effect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>loops (int):</strong>  Number of times to repeat the sound effect after the first play.\n-1 means the sound effect will play once.\n0 means indefinitely.\n&gt;=1 means play n times.</li>\n<li><strong>maxtime (int):</strong>  Max Milliseconds to play the sound effect.</li>\n<li><strong>fade_ms (int):</strong>  Milliseconds to fade in the sound effect.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loops</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">maxtime</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">fade_ms</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.sfx.SoundEffect.stop", "modulename": "pyxora.wrapper.sfx", "qualname": "SoundEffect.stop", "kind": "function", "doc": "<p>Stop the sound effect.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.shapes", "modulename": "pyxora.wrapper.shapes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.wrapper.shapes.Shape", "modulename": "pyxora.wrapper.shapes", "qualname": "Shape", "kind": "class", "doc": "<p>Abstract base class for all drawable shapes.</p>\n", "bases": "abc.ABC"}, {"fullname": "pyxora.wrapper.shapes.Shape.__init__", "modulename": "pyxora.wrapper.shapes", "qualname": "Shape.__init__", "kind": "function", "doc": "<p>Initializes the shape with a position and color.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (pos:</strong>  Tuple[int | float, int | float] | pygame.math.Vector2 | pygame.math.Vector3): The position of the shape.</li>\n<li><strong>color (str | tuple):</strong>  The color of the shape, either as a string (e.g., \"red\") or a tuple (R, G, B).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span></span>)</span>"}, {"fullname": "pyxora.wrapper.shapes.Shape.position", "modulename": "pyxora.wrapper.shapes", "qualname": "Shape.position", "kind": "variable", "doc": "<p>property to get a copy of the position of the shape.</p>\n", "annotation": ": pygame.math.Vector2 | pygame.math.Vector3"}, {"fullname": "pyxora.wrapper.shapes.Shape.color", "modulename": "pyxora.wrapper.shapes", "qualname": "Shape.color", "kind": "variable", "doc": "<p>property to get the color of the shape.</p>\n", "annotation": ": Union[str, Tuple[int, int, int]]"}, {"fullname": "pyxora.wrapper.shapes.Shape.rect", "modulename": "pyxora.wrapper.shapes", "qualname": "Shape.rect", "kind": "variable", "doc": "<p>Returns the bounding rectangle (pygame.Rect or pygame.FRect) based on coordinate types.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.Rect | pygame.FRect: The bounding rectangle of the shape.</p>\n</blockquote>\n", "annotation": ": pygame.rect.Rect | pygame.rect.FRect"}, {"fullname": "pyxora.wrapper.shapes.Shape.draw", "modulename": "pyxora.wrapper.shapes", "qualname": "Shape.draw", "kind": "function", "doc": "<p>Abstract method to draw the shape on a surface with a given fill and scale.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>surf (pygame.Surface):</strong>  The surface to draw on.</li>\n<li><strong>fill (int):</strong>  The fill value for the shape (positive values for outline else is solid).</li>\n<li><strong>scale (int | float):</strong>  The scale factor for the shape size.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">surf</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.shapes.Shape.move", "modulename": "pyxora.wrapper.shapes", "qualname": "Shape.move", "kind": "function", "doc": "<p>Moves the shape by the given offset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (Tuple[int | float, int | float] | Vector2 | Vector3):</strong>  The amount to move the shape by, relative to its current position.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.shapes.Shape.move_at", "modulename": "pyxora.wrapper.shapes", "qualname": "Shape.move_at", "kind": "function", "doc": "<p>Moves the shape to a position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (Tuple[int | float, int | float] | Vector2 | Vector3):</strong>  The new position for the shape.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.shapes.Rect", "modulename": "pyxora.wrapper.shapes", "qualname": "Rect", "kind": "class", "doc": "<p>Represents a rectangle shape.</p>\n", "bases": "Shape"}, {"fullname": "pyxora.wrapper.shapes.Rect.__init__", "modulename": "pyxora.wrapper.shapes", "qualname": "Rect.__init__", "kind": "function", "doc": "<p>Initializes the rectangle with position, size, and color.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (tuple[int | float, int | float] | pygame.math.Vector2 | pygame.math.Vector3):</strong>  The position of the rectangle.</li>\n<li><strong>size (tuple[int | float, int | float] | pygame.math.Vector2 | pygame.math.Vector3):</strong>  The size of the rectangle (width, height).</li>\n<li><strong>color (str | tuple):</strong>  The color of the rectangle, either as a string (e.g., \"red\") or a tuple (R, G, B).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span></span>)</span>"}, {"fullname": "pyxora.wrapper.shapes.Rect.size", "modulename": "pyxora.wrapper.shapes", "qualname": "Rect.size", "kind": "variable", "doc": "<p>The size of the Rect</p>\n", "annotation": ": Tuple[int | float, int | float]"}, {"fullname": "pyxora.wrapper.shapes.Rect.rect", "modulename": "pyxora.wrapper.shapes", "qualname": "Rect.rect", "kind": "variable", "doc": "<p>Returns the bounding rectangle (pygame.Rect or pygame.FRect) based on coordinate types.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.Rect | pygame.FRect: The bounding rectangle of the shape.</p>\n</blockquote>\n", "annotation": ": pygame.rect.Rect | pygame.rect.FRect"}, {"fullname": "pyxora.wrapper.shapes.Rect.draw", "modulename": "pyxora.wrapper.shapes", "qualname": "Rect.draw", "kind": "function", "doc": "<p>Draws the rectangle on the surface with a given fill and scale.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>surf (pygame.Surface):</strong>  The surface to draw on.</li>\n<li><strong>fill (int):</strong>  The fill value for the shape (positive values for outline else is solid).</li>\n<li><strong>scale (int | float):</strong>  The scale factor for the rectangle size.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">surf</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.shapes.Circle", "modulename": "pyxora.wrapper.shapes", "qualname": "Circle", "kind": "class", "doc": "<p>Represents a circle shape.</p>\n", "bases": "Shape"}, {"fullname": "pyxora.wrapper.shapes.Circle.__init__", "modulename": "pyxora.wrapper.shapes", "qualname": "Circle.__init__", "kind": "function", "doc": "<p>Initializes the circle with position, radius, and color.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos:</strong>  Tuple[int | float, int | float] | pygame.math.Vector2 | pygame.math.Vector3,</li>\n<li><strong>radius (int | float):</strong>  The radius of the circle.</li>\n<li><strong>color (str | tuple):</strong>  The color of the circle, either as a string (e.g., \"red\") or a tuple (R, G, B).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span></span>)</span>"}, {"fullname": "pyxora.wrapper.shapes.Circle.radius", "modulename": "pyxora.wrapper.shapes", "qualname": "Circle.radius", "kind": "variable", "doc": "<p>The radius of the Circle</p>\n", "annotation": ": int | float"}, {"fullname": "pyxora.wrapper.shapes.Circle.rect", "modulename": "pyxora.wrapper.shapes", "qualname": "Circle.rect", "kind": "variable", "doc": "<p>Returns the bounding rectangle for the circle.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.Rect: The bounding rectangle that encloses the circle.</p>\n</blockquote>\n", "annotation": ": pygame.rect.Rect"}, {"fullname": "pyxora.wrapper.shapes.Circle.draw", "modulename": "pyxora.wrapper.shapes", "qualname": "Circle.draw", "kind": "function", "doc": "<p>Draws the circle on the surface with a given fill and scale.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>surf (pygame.Surface):</strong>  The surface to draw on.</li>\n<li><strong>fill (int):</strong>  The fill value for the circle outline (negative for outline, positive for solid).</li>\n<li><strong>scale (int | float):</strong>  The scale factor for the circle size.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">surf</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.text", "modulename": "pyxora.wrapper.text", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyxora.wrapper.text.text_sizes", "modulename": "pyxora.wrapper.text", "qualname": "text_sizes", "kind": "variable", "doc": "<p>The available text sizes</p>\n", "default_value": "{256, 1, 2, 128, 4, 64, 192, 8, 72, 10, 12, 14, 16, 144, 18, 24, 32, 96, 48}"}, {"fullname": "pyxora.wrapper.text.Text", "modulename": "pyxora.wrapper.text", "qualname": "Text", "kind": "class", "doc": "<p>A class for rendering text</p>\n\n<p>Supports caching of fonts and rendered surfaces for performance,\nalignment options, scaling (zoom), and limiting cache size.</p>\n"}, {"fullname": "pyxora.wrapper.text.Text.__init__", "modulename": "pyxora.wrapper.text", "qualname": "Text.__init__", "kind": "function", "doc": "<p>Initialize a Text object.</p>\n\n<p>Args:\npos (pos: Tuple[int | float, int | float] | pygame.math.Vector2 | pygame.math.Vector3): The position of the text.\n    text (str): The string to render.\n    color (str or tuple): The color of the text.\n    font_name (str): The text font name.\n    size (int): Font size.\n    align (str): Alignment of the text: \"left\", \"center\", or \"right\".</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">font_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;freesansbold&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">align</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;left&#39;</span></span>)</span>"}, {"fullname": "pyxora.wrapper.text.Text.surfaces", "modulename": "pyxora.wrapper.text", "qualname": "Text.surfaces", "kind": "variable", "doc": "<p>The surfaces cache</p>\n", "annotation": ": dict", "default_value": "OrderedDict()"}, {"fullname": "pyxora.wrapper.text.Text.set_cache", "modulename": "pyxora.wrapper.text", "qualname": "Text.set_cache", "kind": "function", "doc": "<p>Set the maximum number of cached surfaces.\nNote: Default is 10000, but can be increased or decreased as needed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>new_limit (int):</strong>  New cache size limit.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">new_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.text.Text.get_cache", "modulename": "pyxora.wrapper.text", "qualname": "Text.get_cache", "kind": "function", "doc": "<p>Get the number of cached surfaces.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of cached surfaces.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.text.Text.clear_cache", "modulename": "pyxora.wrapper.text", "qualname": "Text.clear_cache", "kind": "function", "doc": "<p>Clear all cached text surfaces.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.text.Text.font_size_for", "modulename": "pyxora.wrapper.text", "qualname": "Text.font_size_for", "kind": "function", "doc": "<p>Calculates the largest font size that fits the text inside a given area.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>text (str):</strong>  Text to render.</li>\n<li><strong>size (size:</strong>  Tuple[int | float, int | float] | pygame.math.Vector2 | pygame.math.Vector3): The size of the text.</li>\n<li><strong>font_name (str):</strong>  Name of the cache font.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: Maximum font size that fits.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">font_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.text.Text.position", "modulename": "pyxora.wrapper.text", "qualname": "Text.position", "kind": "variable", "doc": "<p>Get a copy of the position of the text.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.math.Vector2 or pygame.math.Vector3: The position of the text.</p>\n</blockquote>\n", "annotation": ": pygame.math.Vector2 | pygame.math.Vector3"}, {"fullname": "pyxora.wrapper.text.Text.value", "modulename": "pyxora.wrapper.text", "qualname": "Text.value", "kind": "variable", "doc": "<p>Get the value of the text.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The value of the text.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "pyxora.wrapper.text.Text.color", "modulename": "pyxora.wrapper.text", "qualname": "Text.color", "kind": "variable", "doc": "<p>Get the color of the text.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str or tuple): The color of the text.</p>\n</blockquote>\n", "annotation": ": str | tuple"}, {"fullname": "pyxora.wrapper.text.Text.font", "modulename": "pyxora.wrapper.text", "qualname": "Text.font", "kind": "variable", "doc": "<p>Get the color of the text.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str): The font name</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "pyxora.wrapper.text.Text.font_size", "modulename": "pyxora.wrapper.text", "qualname": "Text.font_size", "kind": "variable", "doc": "<p>Get the size of the text font.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The size of the text font.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "pyxora.wrapper.text.Text.size", "modulename": "pyxora.wrapper.text", "qualname": "Text.size", "kind": "variable", "doc": "<p>Get the surface size of the text font.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The size of the text font.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "pyxora.wrapper.text.Text.rect", "modulename": "pyxora.wrapper.text", "qualname": "Text.rect", "kind": "variable", "doc": "<p>Get the rectangle bounds of the text surface.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pygame.Rect: The rectangle with position applied.</p>\n</blockquote>\n", "annotation": ": pygame.rect.Rect"}, {"fullname": "pyxora.wrapper.text.Text.memory", "modulename": "pyxora.wrapper.text", "qualname": "Text.memory", "kind": "variable", "doc": "<p>Returns the memory size of the text in bytes.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The memory size of the text surface.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "pyxora.wrapper.text.Text.move", "modulename": "pyxora.wrapper.text", "qualname": "Text.move", "kind": "function", "doc": "<p>Moves the text by the given offset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (Tuple[int | float, int | float] | Vector2 | Vector3):</strong>  The amount to move the text by, relative to its current position.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.text.Text.move_at", "modulename": "pyxora.wrapper.text", "qualname": "Text.move_at", "kind": "function", "doc": "<p>Moves the text to a position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (Tuple[int | float, int | float] | Vector2 | Vector3):</strong>  The new position for the text.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">,</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyxora.wrapper.text.Text.draw", "modulename": "pyxora.wrapper.text", "qualname": "Text.draw", "kind": "function", "doc": "<p>Draws the text on the given surface.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>surf (pygame.Surface):</strong>  The surface to draw the text on.</li>\n<li><strong>scale (float):</strong>  The scale factor to apply to the text.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">surf</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();